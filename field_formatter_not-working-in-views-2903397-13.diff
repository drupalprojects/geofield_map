diff --git a/src/GeofieldMapFieldTrait.php b/src/GeofieldMapFieldTrait.php
index df2d271..6dabcce 100644
--- a/src/GeofieldMapFieldTrait.php
+++ b/src/GeofieldMapFieldTrait.php
@@ -449,30 +449,46 @@ trait GeofieldMapFieldTrait {
       '#element_validate' => [[get_class($this), 'urlValidate']],
     ];
 
-    // In case it is a Field Formatter.
+    // Check if a Field Formatter is being managed and define its possible
+    // Entity Type and Bundles.
     if (isset($form['#entity_type'])) {
+      $entityType = $form['#entity_type'];
+      $bundles = (!empty($form['#bundle'])) ? [$form['#bundle']] : [];
+    }
+    elseif (property_exists(get_class($this), 'fieldDefinition')) {
+      $entityType = $this->fieldDefinition->getTargetEntityTypeId();
+      $field_name = $this->fieldDefinition->getName();
+      $fields = $this->entityFieldManager->getFieldMapByFieldType($this->fieldDefinition->getType());
+      $bundles = !empty($fields['node'][$field_name]['bundles']) ? $fields['node'][$field_name]['bundles'] : [];
+    }
 
-      $fields_list = array_merge_recursive(
-        $entityFieldManager->getFieldMapByFieldType('string_long'),
-        $entityFieldManager->getFieldMapByFieldType('string')
-      );
-
-      $string_fields_options = [
+    // In case it is a Field Formatter.
+    if (isset($entityType)) {
+      $desc_options = [
         '0' => $this->t('- Any - No Infowindow'),
         'title' => $this->t('- Title -'),
       ];
 
-      foreach ($fields_list[$form['#entity_type']] as $k => $field) {
-        if (in_array(
-            $form['#bundle'], $field['bundles']) &&
+      $fields_list = array_merge_recursive(
+        $this->entityFieldManager->getFieldMapByFieldType('string_long'),
+        $this->entityFieldManager->getFieldMapByFieldType('string'),
+        $this->entityFieldManager->getFieldMapByFieldType('text'),
+        $this->entityFieldManager->getFieldMapByFieldType('text_long')
+      );
+
+      foreach ($fields_list[$entityType] as $k => $field) {
+        if (isset($bundles) && !empty(array_intersect($field['bundles'], $bundles)) &&
           !in_array($k, ['title', 'revision_log'])) {
-          $string_fields_options[$k] = $k;
+          $desc_options[$k] = $k;
         }
       }
 
-      $info_window_source_options = $string_fields_options;
+      $desc_options['#rendered_entity'] = $this->t('- Rendered @entity entity -', array('@entity' => $entityType));
+
+      $info_window_source_options = $desc_options;
 
     }
+    // Else it is a Geofield View Style Format Settings.
     else {
       $info_window_source_options = isset($settings['infowindow_content_options']) ? $settings['infowindow_content_options'] : [];
     }
@@ -486,15 +502,32 @@ trait GeofieldMapFieldTrait {
         '#default_value' => $settings['map_marker_and_infowindow']['infowindow_field'],
       ];
     }
-    else {
-      $elements['map_marker_and_infowindow']['infowindow_field'] = [
-        '#type' => 'textfield',
-        '#title' => $this->t('Marker Infowindow Content from Field'),
-        '#default_value' => $settings['map_marker_and_infowindow']['infowindow_field'],
-        '#size' => 25,
-        '#maxlength' => 25,
-        '#description' => $this->t("Input the machine name of the field you want the Infowindow be filled from. Input 'title', for the Content Title.<br><b>Note: This is actually working only with string type fields (not lists, entity references, etc.)</b>"),
-      ];
+
+    if (isset($entityType)) {
+      // Get the human readable labels for the entity view modes.
+      $view_mode_options = array();
+      $thisViewMode = in_array($this->viewMode, ['default', 'full']) ? ['default', 'full'] : [$this->viewMode];
+      foreach ($this->entityDisplayRepository->getViewModes($entityType) as $key => $view_mode) {
+        if (!in_array($key, $thisViewMode)) {
+          $view_mode_options[$key] = $view_mode['label'];
+        }
+      }
+      // The View Mode drop-down is visible conditional on "#rendered_entity"
+      // being selected in the Description drop-down above.
+      $elements['map_marker_and_infowindow']['view_mode'] = array(
+        '#type' => 'select',
+        '#title' => $this->t('View mode'),
+        '#description' => $this->t('View mode the entity will be displayed in the Infowindow.<br><div style="color: red;"><b>Warning:</b> Incorrect use of this may cause infinite loops / application crash (i.e: View mode that holds a Geofield Map Formatter with an Infowindow already rendering This View mode ...)'),
+        '#options' => $view_mode_options,
+        '#default_value' => !empty($settings['map_marker_and_infowindow']['view_mode']) ? $settings['map_marker_and_infowindow']['view_mode'] : NULL,
+        '#states' => array(
+          'visible' => array(
+            ':input[name$="[settings][map_marker_and_infowindow][infowindow_field]"]' => array(
+              'value' => '#rendered_entity',
+            ),
+          ),
+        ),
+      );
     }
 
     $elements['map_additional_options'] = [
diff --git a/src/Plugin/Field/FieldFormatter/GeofieldGoogleMapFormatter.php b/src/Plugin/Field/FieldFormatter/GeofieldGoogleMapFormatter.php
index 944e8fa..b57a3f2 100644
--- a/src/Plugin/Field/FieldFormatter/GeofieldGoogleMapFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/GeofieldGoogleMapFormatter.php
@@ -14,6 +14,8 @@ use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Utility\LinkGeneratorInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\geofield\GeoPHP\GeoPHPInterface;
 
@@ -51,6 +53,21 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
   protected $config;
 
   /**
+   * Entity manager service.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * Entity display repository.
+   *
+   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   */
+  protected $entityDisplayRepository;
+
+
+  /**
    * The Link generator Service.
    *
    * @var \Drupal\Core\Utility\LinkGeneratorInterface
@@ -82,6 +99,10 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
    *   The Translation service.
    * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
    *   The Link Generator service.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   Entity type manager service.
+   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   *   Entity display repository service.
    * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
    *   The Entity Field Manager.
    * @param \Drupal\geofield\GeoPHP\GeoPHPInterface $geophp_wrapper
@@ -98,12 +119,16 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
     ConfigFactoryInterface $config_factory,
     TranslationInterface $string_translation,
     LinkGeneratorInterface $link_generator,
+    EntityTypeManagerInterface $entity_type_manager,
+    EntityDisplayRepositoryInterface $entity_display_repository,
     EntityFieldManagerInterface $entity_field_manager,
     GeoPHPInterface $geophp_wrapper
   ) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $label, $view_mode, $third_party_settings);
     $this->config = $config_factory;
     $this->link = $link_generator;
+    $this->entityTypeManager = $entity_type_manager;
+    $this->entityDisplayRepository = $entity_display_repository;
     $this->entityFieldManager = $entity_field_manager;
     $this->GeoPHPWrapper = $geophp_wrapper;
   }
@@ -123,6 +148,8 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
       $container->get('config.factory'),
       $container->get('string_translation'),
       $container->get('link_generator'),
+      $container->get('entity_type.manager'),
+      $container->get('entity_display.repository'),
       $container->get('entity_field.manager'),
       $container->get('geofield.geophp')
     );
@@ -322,6 +349,14 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
       ],
     ];
 
+    if ($settings['map_marker_and_infowindow']['infowindow_field'] == '#rendered_entity') {
+      $map_marker_and_infowindow['view_mode'] = [
+        '#type' => 'html_tag',
+        '#tag' => 'div',
+        '#value' => $this->t('View Mode: @state', ['@state' => $settings['map_marker_and_infowindow']['view_mode']]),
+      ];
+    }
+
     if (!empty($settings['map_additional_options'])) {
       $map_additional_options = [
         '#type' => 'html_tag',
@@ -390,7 +425,8 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
 
     /* @var \Drupal\Core\Entity\EntityInterface $entity */
     $entity = $items->getEntity();
-    $entity_type = $entity->bundle();
+    $entity_type = $entity->getEntityTypeId();
+    $bundle = $entity->bundle();
     $entity_id = $entity->id();
     /* @var \Drupal\Core\Field\FieldDefinitionInterface $field */
     $field = $items->getFieldDefinition();
@@ -401,13 +437,20 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
     $this->preProcessMapSettings($map_settings);
 
     $js_settings = [
-      'mapid' => Html::getUniqueId("geofield_map_entity_{$entity_type}_{$entity_id}_{$field->getName()}"),
+      'mapid' => Html::getUniqueId("geofield_map_entity_{$bundle}_{$entity_id}_{$field->getName()}"),
       'map_settings' => $map_settings,
       'data' => [],
     ];
 
+    $description_field = $map_settings['map_marker_and_infowindow']['infowindow_field'];
     $description = NULL;
-    if (!empty($map_settings['map_marker_and_infowindow']['infowindow_field'])) {
+    // Render the entity with the selected view mode.
+    if ($description_field === '#rendered_entity' && is_object($entity)) {
+      $build = $this->entityTypeManager->getViewBuilder($entity_type)->view($entity, $map_settings['map_marker_and_infowindow']['view_mode']);
+      $description = render($build);
+    }
+    // Normal rendering via fields.
+    elseif ($description_field) {
       $description_field_name = strtolower($map_settings['map_marker_and_infowindow']['infowindow_field']);
       $description = $map_settings['map_marker_and_infowindow']['infowindow_field'] != 'title' ? $entity->$description_field_name->value : $entity->label();
     }
