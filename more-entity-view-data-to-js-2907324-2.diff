diff --git a/js/geofield_google_map.js b/js/geofield_google_map.js
index 7ec7e81..f15060f 100644
--- a/js/geofield_google_map.js
+++ b/js/geofield_google_map.js
@@ -14,7 +14,7 @@
           if (drupalSettings['geofield_google_map'][mapid] && !Drupal.geoFieldMap.map_data[mapid]) {
 
             var map_settings = drupalSettings['geofield_google_map'][mapid]['map_settings'];
-            var data = drupalSettings['geofield_google_map'][mapid]['data'];
+            var data = drupalSettings['geofield_google_map'][mapid].data;
 
             // Set the map_data[mapid] settings.
             Drupal.geoFieldMap.map_data[mapid] = map_settings;
@@ -229,6 +229,7 @@
 
         // Define a mapid self property, so other code can interact with it.
         self.map_data[mapid].map = map;
+        self.map_data[mapid].features = data.features;
         self.map_data[mapid].markers = [];
 
         // Define the MapBounds property.
diff --git a/src/GeofieldMapFieldTrait.php b/src/GeofieldMapFieldTrait.php
index 7f31abb..2a6af1e 100644
--- a/src/GeofieldMapFieldTrait.php
+++ b/src/GeofieldMapFieldTrait.php
@@ -696,7 +696,7 @@ trait GeofieldMapFieldTrait {
    * @param string $description
    *   The description value.
    */
-  protected function getGeoJsonData($items, $description = NULL) {
+  protected function getGeoJsonData($items, $description = NULL, $entity_data = NULL, $view_data = NULL) {
     $data = [];
     foreach ($items as $delta => $item) {
 
@@ -709,6 +709,8 @@ trait GeofieldMapFieldTrait {
         ];
         $datum['properties'] = [
           'description' => isset($description) ? $description : NULL,
+          'entity_data' => isset($entity_data) ? $entity_data : NULL,
+          'view_data' => isset($view_data) ? $view_data : NULL,
         ];
         $data[] = $datum;
       }
diff --git a/src/Plugin/Field/FieldFormatter/GeofieldGoogleMapFormatter.php b/src/Plugin/Field/FieldFormatter/GeofieldGoogleMapFormatter.php
index 1feb6c1..11830e2 100644
--- a/src/Plugin/Field/FieldFormatter/GeofieldGoogleMapFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/GeofieldGoogleMapFormatter.php
@@ -18,6 +18,8 @@ use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\geofield\GeoPHP\GeoPHPInterface;
+use Drupal\Component\Serialization\Json;
+use Symfony\Component\Serializer\SerializerInterface;
 
 /**
  * Plugin implementation of the 'geofield_google_map' formatter.
@@ -89,6 +91,13 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
   protected $GeoPHPWrapper;
 
   /**
+   * The serializer service.
+   *
+   * @var \Symfony\Component\Serializer\SerializerInterface
+   */
+  protected $serializer;
+
+  /**
    * GeofieldGoogleMapFormatter constructor.
    *
    * {@inheritdoc}
@@ -107,6 +116,8 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
    *   The Entity Field Manager.
    * @param \Drupal\geofield\GeoPHP\GeoPHPInterface $geophp_wrapper
    *   The The GeoPHPWrapper.
+   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   *   The serializer service.
    */
   public function __construct(
     $plugin_id,
@@ -122,7 +133,8 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
     EntityTypeManagerInterface $entity_type_manager,
     EntityDisplayRepositoryInterface $entity_display_repository,
     EntityFieldManagerInterface $entity_field_manager,
-    GeoPHPInterface $geophp_wrapper
+    GeoPHPInterface $geophp_wrapper,
+    SerializerInterface $serializer
   ) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $label, $view_mode, $third_party_settings);
     $this->config = $config_factory;
@@ -131,6 +143,7 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
     $this->entityDisplayRepository = $entity_display_repository;
     $this->entityFieldManager = $entity_field_manager;
     $this->GeoPHPWrapper = $geophp_wrapper;
+    $this->serializer = $serializer;
   }
 
   /**
@@ -151,7 +164,8 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
       $container->get('entity_type.manager'),
       $container->get('entity_display.repository'),
       $container->get('entity_field.manager'),
-      $container->get('geofield.geophp')
+      $container->get('geofield.geophp'),
+      $container->get('serializer')
     );
   }
 
@@ -468,7 +482,8 @@ class GeofieldGoogleMapFormatter extends FormatterBase implements ContainerFacto
       $description = $map_settings['map_marker_and_infowindow']['infowindow_field'] != 'title' ? $entity->$description_field_name->value : $entity->label();
     }
 
-    $data = $this->getGeoJsonData($items, $description);
+    $entity_data = JSON::decode($this->serializer->serialize($entity, 'json', ['plugin_id' => 'entity']));
+    $data = $this->getGeoJsonData($items, $description, $entity_data);
 
     if (empty($data) && $map_settings['map_empty']['empty_behaviour'] !== '2') {
       return [
diff --git a/src/Plugin/views/style/GeofieldGoogleMapViewStyle.php b/src/Plugin/views/style/GeofieldGoogleMapViewStyle.php
index df4f89d..88b6793 100644
--- a/src/Plugin/views/style/GeofieldGoogleMapViewStyle.php
+++ b/src/Plugin/views/style/GeofieldGoogleMapViewStyle.php
@@ -17,6 +17,8 @@ use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Utility\LinkGeneratorInterface;
 use Drupal\geofield\GeoPHP\GeoPHPInterface;
+use Drupal\Component\Serialization\Json;
+use Symfony\Component\Serializer\SerializerInterface;
 
 /**
  * Style plugin to render a View output as a Leaflet map.
@@ -108,6 +110,13 @@ class GeofieldGoogleMapViewStyle extends StylePluginBase implements ContainerFac
   protected $GeoPHPWrapper;
 
   /**
+   * The serializer service.
+   *
+   * @var \Symfony\Component\Serializer\SerializerInterface
+   */
+  protected $serializer;
+
+  /**
    * Constructs a GeofieldGoogleMapView style instance.
    *
    * {@inheritdoc}
@@ -126,6 +135,8 @@ class GeofieldGoogleMapViewStyle extends StylePluginBase implements ContainerFac
    *   The Link Generator service.
    * @param \Drupal\geofield\GeoPHP\GeoPHPInterface $geophp_wrapper
    *   The The GeoPHPWrapper.
+   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   *   The serializer service.
    */
   public function __construct(
     array $configuration,
@@ -137,7 +148,8 @@ class GeofieldGoogleMapViewStyle extends StylePluginBase implements ContainerFac
     EntityDisplayRepositoryInterface $entity_display,
     RendererInterface $renderer,
     LinkGeneratorInterface $link_generator,
-    GeoPHPInterface $geophp_wrapper
+    GeoPHPInterface $geophp_wrapper,
+    SerializerInterface $serializer
   ) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
@@ -148,6 +160,7 @@ class GeofieldGoogleMapViewStyle extends StylePluginBase implements ContainerFac
     $this->renderer = $renderer;
     $this->link = $link_generator;
     $this->GeoPHPWrapper = $geophp_wrapper;
+    $this->serializer = $serializer;
 
   }
 
@@ -165,7 +178,8 @@ class GeofieldGoogleMapViewStyle extends StylePluginBase implements ContainerFac
       $container->get('entity_display.repository'),
       $container->get('renderer'),
       $container->get('link_generator'),
-      $container->get('geofield.geophp')
+      $container->get('geofield.geophp'),
+      $container->get('serializer')
     );
   }
 
@@ -347,7 +361,15 @@ class GeofieldGoogleMapViewStyle extends StylePluginBase implements ContainerFac
             $description = $this->rendered_fields[$id][$description_field];
           }
 
-          $data = array_merge($data, $this->getGeoJsonData($geofield_value, $description));
+          $entity_data = JSON::decode($this->serializer->serialize($result->_entity, 'json', ['plugin_id' => 'entity']));
+          $view_data = [];
+          foreach($this->rendered_fields[$id] as $field_name => $rendered_field) {
+            if (!empty($rendered_field)) {
+              /* @var \Drupal\Core\Render\Markup $rendered_field */
+              $view_data[$field_name] = $rendered_field->__toString();
+            }
+          }
+          $data = array_merge($data, $this->getGeoJsonData($geofield_value, $description, $entity_data, $view_data));
         }
       }
     }
